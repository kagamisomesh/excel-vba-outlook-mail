'Declare all variables mannually
Option Explicit

Sub Mail_Table_()

    Dim select_Range As Range
    Dim OutApp As Object
    Dim OutMail As Object
    Dim signPath As String
    Dim Signature As String
    Dim Ws As Worksheet
    
    Set Ws = ActiveWorkbook.ActiveSheet
        
    Dim mailBody As String

    Set select_Range = Selection
    
    On Error Resume Next
    
    'You can style your body by CSS properties
    'like "<font size=""10px"" color=""red"">" & HTMLBody & "</font>"
    mailBody = "<div>" & _
            "Hi" & "<br><br>" & _
            "This is mail body" & "<br>" & _
            "table will be printed below" & "<br>"
            "</div>"
    
    
    'when working in corporate world
    'your outlook signature is stored in hidden folder
    'make sure to unhide it
    signPath = Environ("appdata") & "\Microsoft\Signatures\Signature_Name.htm" '"Signature_Name" is your registered Outlook Signature Name
                
    If Dir(signPath) <> "" Then
        Signature = to_Html_String(signPath)
    Else
        Signature = "Regards," & "<br>" & "Your Name"
    End If

    On Error Resume Next
    
    'Only the visible cells in the selection
    'Set select_Range = Selection.SpecialCells(xlCellTypeVisible)
    'You can also use a fixed range if you want
    Set select_Range = ActiveSheet.Selection
    On Error GoTo 0

    If select_Range Is Nothing Then
        MsgBox "The selection is not a range or the sheet is protected" & _
            vbNewLine & "please correct and try again.", vbOKOnly
        Exit Sub
    End If

    With Application
        .EnableEvents = False
        .ScreenUpdating = False
    End With

    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)

    On Error Resume Next
    With OutMail
        .To = "someone1@company.com"
        .CC = "someone2@company.com"
        .BCC = "someone3@company.com"
        .Subject = "This is the Subject line"
        
        'organization of mail Body
        .HTMLBody = mailBody & RangetoHTML(select_Range) & "<br><br>" & Signature
        .Display   'or use .send to send mail
    
    End With
    On Error GoTo 0

    With Application
        .EnableEvents = True
        .ScreenUpdating = True
    End With

    Set OutMail = Nothing
    Set OutApp = Nothing
End Sub


Function RangetoHTML(select_Range As Range)

    Dim fso As Object
    Dim ts As Object
    Dim TempFile As String
    Dim TempWB As Workbook

    TempFile = Environ$("temp") & "\" & Format(Now, "dd-mm-yy h-mm-ss") & ".htm"

    'Copy the range and create a new workbook to pass the data in
    select_Range.Copy
    Set TempWB = Workbooks.Add(1)
    With TempWB.Sheets(1)
        .Cells(1).PasteSpecial Paste:=8
        .Cells(1).PasteSpecial xlPasteValues, , False, False
        .Cells(1).PasteSpecial xlPasteFormats, , False, False
        .Cells(1).Select
        Application.CutCopyMode = False
        On Error Resume Next
        .DrawingObjects.Visible = True
        .DrawingObjects.Delete
        On Error GoTo 0
    End With

    'Publish the sheet to a htm file
    With TempWB.PublishObjects.Add( _
            SourceType:=xlSourceRange, _
            Filename:=TempFile, _
            Sheet:=TempWB.Sheets(1).Name, _
            Source:=TempWB.Sheets(1).UsedRange.Address, _
            HtmlType:=xlHtmlStatic)
        .Publish (True)
    End With

    'Read all data from the htm file into RangetoHTML
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set ts = fso.GetFile(TempFile).OpenAsTextStream(1, -2)
    RangetoHTML = ts.readall
    ts.Close
    RangetoHTML = Replace(RangetoHTML, "align=center x:publishsource=", _
                        "align=left x:publishsource=")

    'Close TempWB
    TempWB.Close savechanges:=False

    'Delete the htm file we used in this function
    Kill TempFile

    Set ts = Nothing
    Set fso = Nothing
    Set TempWB = Nothing

End Function


Function to_Html_String(ByVal sFile As String) As String

    Dim fso As Object
    Dim ts As Object
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set ts = fso.GetFile(sFile).OpenAsTextStream(1, -2)
    to_Html_String = ts.readall
    ts.Close

End Function
